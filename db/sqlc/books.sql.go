// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: books.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
  isbn, 
  title, 
  description, 
  author,
  image_url,
  genre,
  quantity,
  published_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, isbn, title, description, author, image_url, genre, quantity, published_at, created_at, updated_at, deleted_at
`

type CreateBookParams struct {
	Isbn        string      `json:"isbn"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Author      string      `json:"author"`
	ImageUrl    pgtype.Text `json:"image_url"`
	Genre       string      `json:"genre"`
	Quantity    int32       `json:"quantity"`
	PublishedAt time.Time   `json:"published_at"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.Isbn,
		arg.Title,
		arg.Description,
		arg.Author,
		arg.ImageUrl,
		arg.Genre,
		arg.Quantity,
		arg.PublishedAt,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn,
		&i.Title,
		&i.Description,
		&i.Author,
		&i.ImageUrl,
		&i.Genre,
		&i.Quantity,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id=$1
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, isbn, title, description, author, image_url, genre, quantity, published_at, created_at, updated_at, deleted_at FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn,
		&i.Title,
		&i.Description,
		&i.Author,
		&i.ImageUrl,
		&i.Genre,
		&i.Quantity,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getBookForUpdate = `-- name: GetBookForUpdate :one
SELECT id, isbn, title, description, author, image_url, genre, quantity, published_at, created_at, updated_at, deleted_at FROM books
WHERE id = $1 LIMIT 1 FOR UPDATE
`

func (q *Queries) GetBookForUpdate(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, getBookForUpdate, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn,
		&i.Title,
		&i.Description,
		&i.Author,
		&i.ImageUrl,
		&i.Genre,
		&i.Quantity,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, isbn, title, description, author, image_url, genre, quantity, published_at, created_at, updated_at, deleted_at
FROM books
ORDER BY title
`

func (q *Queries) ListBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Isbn,
			&i.Title,
			&i.Description,
			&i.Author,
			&i.ImageUrl,
			&i.Genre,
			&i.Quantity,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books 
SET 
  isbn=coalesce($1, isbn),
  title=coalesce($2, title),
  description=coalesce($3, description),
  author=coalesce($4, author),
  image_url=coalesce($5, image_url),
  genre=coalesce($6, genre),
  quantity=coalesce($7, quantity),
  published_at=coalesce($8, published_at)
WHERE id=$9
RETURNING id, isbn, title, description, author, image_url, genre, quantity, published_at, created_at, updated_at, deleted_at
`

type UpdateBookParams struct {
	Isbn        pgtype.Text        `json:"isbn"`
	Title       pgtype.Text        `json:"title"`
	Description pgtype.Text        `json:"description"`
	Author      pgtype.Text        `json:"author"`
	ImageUrl    pgtype.Text        `json:"image_url"`
	Genre       pgtype.Text        `json:"genre"`
	Quantity    pgtype.Int4        `json:"quantity"`
	PublishedAt pgtype.Timestamptz `json:"published_at"`
	ID          int32              `json:"id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBook,
		arg.Isbn,
		arg.Title,
		arg.Description,
		arg.Author,
		arg.ImageUrl,
		arg.Genre,
		arg.Quantity,
		arg.PublishedAt,
		arg.ID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn,
		&i.Title,
		&i.Description,
		&i.Author,
		&i.ImageUrl,
		&i.Genre,
		&i.Quantity,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
