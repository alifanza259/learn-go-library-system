// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: borrow_detail.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBorrow = `-- name: CreateBorrow :one
INSERT INTO borrow_details (
  book_id,
  borrowed_at,
  returned_at
) VALUES (
  $1, $2, $3
)
RETURNING id, book_id, borrowed_at, returned_at, created_at, updated_at, deleted_at
`

type CreateBorrowParams struct {
	BookID     int32     `json:"book_id"`
	BorrowedAt time.Time `json:"borrowed_at"`
	ReturnedAt time.Time `json:"returned_at"`
}

func (q *Queries) CreateBorrow(ctx context.Context, arg CreateBorrowParams) (BorrowDetail, error) {
	row := q.db.QueryRow(ctx, createBorrow, arg.BookID, arg.BorrowedAt, arg.ReturnedAt)
	var i BorrowDetail
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.BorrowedAt,
		&i.ReturnedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getBorrow = `-- name: GetBorrow :one
SELECT id, book_id, borrowed_at, returned_at, created_at, updated_at, deleted_at FROM borrow_details
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBorrow(ctx context.Context, id uuid.UUID) (BorrowDetail, error) {
	row := q.db.QueryRow(ctx, getBorrow, id)
	var i BorrowDetail
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.BorrowedAt,
		&i.ReturnedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
