// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: admin.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getAdmin = `-- name: GetAdmin :one
SELECT id, email, first_name, last_name, password, permission, last_accessed_at, created_at, updated_at, deleted_at FROM admin
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAdmin(ctx context.Context, id uuid.UUID) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdmin, id)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Permission,
		&i.LastAccessedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAdminByEmail = `-- name: GetAdminByEmail :one
SELECT id, email, first_name, last_name, password, permission, last_accessed_at, created_at, updated_at, deleted_at FROM admin
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAdminByEmail(ctx context.Context, email string) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdminByEmail, email)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Permission,
		&i.LastAccessedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAdmin = `-- name: ListAdmin :many
SELECT 
    id,
    email,
    first_name,
    last_name,
    permission,
    last_accessed_at,
    created_at,
    deleted_at 
FROM admin
ORDER BY first_name
`

type ListAdminRow struct {
	ID             uuid.UUID          `json:"id"`
	Email          string             `json:"email"`
	FirstName      string             `json:"first_name"`
	LastName       pgtype.Text        `json:"last_name"`
	Permission     string             `json:"permission"`
	LastAccessedAt pgtype.Timestamptz `json:"last_accessed_at"`
	CreatedAt      time.Time          `json:"created_at"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
}

func (q *Queries) ListAdmin(ctx context.Context) ([]ListAdminRow, error) {
	rows, err := q.db.Query(ctx, listAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAdminRow{}
	for rows.Next() {
		var i ListAdminRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Permission,
			&i.LastAccessedAt,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
