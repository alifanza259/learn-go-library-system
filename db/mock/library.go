// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alifanza259/learn-go-library-system/db/sqlc (interfaces: Library)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/alifanza259/learn-go-library-system/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockLibrary is a mock of Library interface.
type MockLibrary struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryMockRecorder
}

// MockLibraryMockRecorder is the mock recorder for MockLibrary.
type MockLibraryMockRecorder struct {
	mock *MockLibrary
}

// NewMockLibrary creates a new mock instance.
func NewMockLibrary(ctrl *gomock.Controller) *MockLibrary {
	mock := &MockLibrary{ctrl: ctrl}
	mock.recorder = &MockLibraryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibrary) EXPECT() *MockLibraryMockRecorder {
	return m.recorder
}

// CreateMember mocks base method.
func (m *MockLibrary) CreateMember(arg0 context.Context, arg1 db.CreateMemberParams) (db.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", arg0, arg1)
	ret0, _ := ret[0].(db.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockLibraryMockRecorder) CreateMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockLibrary)(nil).CreateMember), arg0, arg1)
}

// GetAdmin mocks base method.
func (m *MockLibrary) GetAdmin(arg0 context.Context, arg1 uuid.UUID) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockLibraryMockRecorder) GetAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockLibrary)(nil).GetAdmin), arg0, arg1)
}

// GetMember mocks base method.
func (m *MockLibrary) GetMember(arg0 context.Context, arg1 uuid.UUID) (db.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", arg0, arg1)
	ret0, _ := ret[0].(db.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockLibraryMockRecorder) GetMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockLibrary)(nil).GetMember), arg0, arg1)
}

// GetMemberByEmail mocks base method.
func (m *MockLibrary) GetMemberByEmail(arg0 context.Context, arg1 string) (db.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberByEmail indicates an expected call of GetMemberByEmail.
func (mr *MockLibraryMockRecorder) GetMemberByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberByEmail", reflect.TypeOf((*MockLibrary)(nil).GetMemberByEmail), arg0, arg1)
}

// ListAdmin mocks base method.
func (m *MockLibrary) ListAdmin(arg0 context.Context) ([]db.ListAdminRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdmin", arg0)
	ret0, _ := ret[0].([]db.ListAdminRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdmin indicates an expected call of ListAdmin.
func (mr *MockLibraryMockRecorder) ListAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdmin", reflect.TypeOf((*MockLibrary)(nil).ListAdmin), arg0)
}

// ListMembers mocks base method.
func (m *MockLibrary) ListMembers(arg0 context.Context) ([]db.ListMembersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0)
	ret0, _ := ret[0].([]db.ListMembersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockLibraryMockRecorder) ListMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockLibrary)(nil).ListMembers), arg0)
}
